[{"/Users/brianford/Desktop/Goals-Tracker/client/src/index.js":"1","/Users/brianford/Desktop/Goals-Tracker/client/src/App.js":"2","/Users/brianford/Desktop/Goals-Tracker/client/src/utils/UserContext.js":"3","/Users/brianford/Desktop/Goals-Tracker/client/src/components/NumberWidgetContainer/index.js":"4","/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListWidgetContainer/index.js":"5","/Users/brianford/Desktop/Goals-Tracker/client/src/components/GraphWidgetContainer/index.js":"6","/Users/brianford/Desktop/Goals-Tracker/client/src/components/LoginButton/index.js":"7","/Users/brianford/Desktop/Goals-Tracker/client/src/components/LogoutButton/index.js":"8","/Users/brianford/Desktop/Goals-Tracker/client/src/components/Profile/index.js":"9","/Users/brianford/Desktop/Goals-Tracker/client/src/components/SideBar/index.js":"10","/Users/brianford/Desktop/Goals-Tracker/client/src/pages/GoalCreation/index.js":"11","/Users/brianford/Desktop/Goals-Tracker/client/src/pages/GoalUpdate/index.js":"12","/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListWidget/index.js":"13","/Users/brianford/Desktop/Goals-Tracker/client/src/components/GraphWidget/index.js":"14","/Users/brianford/Desktop/Goals-Tracker/client/src/components/NumberWidget/index.js":"15","/Users/brianford/Desktop/Goals-Tracker/client/src/components/GoalModal/index.js":"16","/Users/brianford/Desktop/Goals-Tracker/client/src/components/Widget/index.js":"17","/Users/brianford/Desktop/Goals-Tracker/client/src/components/Progress/index.js":"18","/Users/brianford/Desktop/Goals-Tracker/client/src/components/NumberDisplay/index.js":"19","/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListDisplay/index.js":"20","/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListItem/index.js":"21","/Users/brianford/Desktop/Goals-Tracker/client/src/components/Loading/index.js":"22","/Users/brianford/Desktop/Goals-Tracker/client/src/components/BarChart/index.js":"23"},{"size":555,"mtime":1610835645398,"results":"24","hashOfConfig":"25"},{"size":2897,"mtime":1612046146257,"results":"26","hashOfConfig":"25"},{"size":385,"mtime":1611593712001,"results":"27","hashOfConfig":"25"},{"size":2115,"mtime":1609800416818,"results":"28","hashOfConfig":"25"},{"size":1566,"mtime":1612030529948,"results":"29","hashOfConfig":"25"},{"size":1523,"mtime":1609800752689,"results":"30","hashOfConfig":"25"},{"size":295,"mtime":1612045550394,"results":"31","hashOfConfig":"25"},{"size":324,"mtime":1612045550395,"results":"32","hashOfConfig":"25"},{"size":1114,"mtime":1612030529948,"results":"33","hashOfConfig":"25"},{"size":802,"mtime":1612045550395,"results":"34","hashOfConfig":"25"},{"size":5269,"mtime":1612030529949,"results":"35","hashOfConfig":"25"},{"size":3999,"mtime":1612030529949,"results":"36","hashOfConfig":"25"},{"size":2341,"mtime":1612030529947,"results":"37","hashOfConfig":"25"},{"size":2727,"mtime":1612045402328,"results":"38","hashOfConfig":"25"},{"size":1428,"mtime":1609801644684,"results":"39","hashOfConfig":"25"},{"size":705,"mtime":1611015313452,"results":"40","hashOfConfig":"25"},{"size":1218,"mtime":1609801699127,"results":"41","hashOfConfig":"25"},{"size":761,"mtime":1609801270082,"results":"42","hashOfConfig":"25"},{"size":640,"mtime":1609801652007,"results":"43","hashOfConfig":"25"},{"size":297,"mtime":1609801137276,"results":"44","hashOfConfig":"25"},{"size":605,"mtime":1609801241388,"results":"45","hashOfConfig":"25"},{"size":1137,"mtime":1609801663834,"results":"46","hashOfConfig":"25"},{"size":884,"mtime":1612046117095,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1x3rjya",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brianford/Desktop/Goals-Tracker/client/src/index.js",[],["102","103"],"/Users/brianford/Desktop/Goals-Tracker/client/src/App.js",["104","105"],"/Users/brianford/Desktop/Goals-Tracker/client/src/utils/UserContext.js",["106"],"import React, { createContext } from 'react';\n\nconst UserContext = createContext({\n  _id: '',\n  name: '',\n  email: '',\n  goals: [{\n    _id: '',\n    title: '',\n    description: '',\n    date: '',\n    color: '',\n    popular: '',\n    highPriority: false,\n    goalUpdates: [{\n      _id: '',\n      updatedAt: '',\n      progress: 0,\n      note: ''\n    }]\n  }]\n});\n\nexport default UserContext;","/Users/brianford/Desktop/Goals-Tracker/client/src/components/NumberWidgetContainer/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListWidgetContainer/index.js",["107","108"],"import React, { Component, useState, useEffect } from 'react';\nimport ListWidget from '../ListWidget/index';\n\nclass ListWidgetContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      values: []\n    }\n\n    // Bind function to refer to component\n    // this.getData = this.getData.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({loading: false, values: nextProps.userGoals})\n  }\n\n  // Fetch data when the component is added\n  // componentDidMount() {\n  //   this.getData().then(_ => {\n  //     // Re-fetch every minute\n  //     this.interval = setInterval(this.getData, 60000);\n  //   });\n  // }\n\n  // // Fetch new data\n  // getData() {\n  //   // Tell the Widget component we're currently loading\n  //   this.setState({ loading: true });\n\n  //   const url = this.props.href;\n  //   return fetch(url)\n  //     .then(response => response.json())\n  //     .then(res => {\n  //       console.log(\"shit\")\n  //       // Update state with data\n  //       this.setState({ loading: false, values: res });\n  //     })\n  //     .catch(error => {\n  //       // At least tell the Widget component we have stopped loading\n  //       console.log(error);\n  //       this.setState({ loading: false });\n  //     });\n  // }\n\n  render() {\n    return (\n      // Render the list widget\n      <ListWidget heading={this.props.heading} colspan={this.props.colspan} rowspan={this.props.rowspan} listItems={this.state.values} loading={this.state.loading} />\n    );\n  }\n}\nexport default ListWidgetContainer;","/Users/brianford/Desktop/Goals-Tracker/client/src/components/GraphWidgetContainer/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/LoginButton/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/LogoutButton/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/Profile/index.js",["109","110","111"],"import React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Profile = () => {\n  const { user, isAuthenticated, isLoading } = useAuth0();\n  const {userData, setUserData} = useState({\n    name: \"\",\n    email: \"\",\n    emailVerified: false\n  })\n\n  // console.log(isAuthenticated)\n  // console.log(user)\n\n  // useEffect(()=>{\n  //   // setUserData({\n  //   //   name: user.name,\n  //   //   email: user.email,\n  //   //   emailVerified: user.emailVerified\n  //   // })\n  //     fetch('/api/user/add', {\n  //       method: 'POST',\n  //       body: JSON.stringify(userData),\n  //       headers: { \n  //         \"Content-type\": \"application/json\"\n  //     } \n  //     })\n  //       .then(res => res.json())\n  //       .then(data => console.log(data))\n  //       .catch(err => console.log(err))\n  // }, [])\n\n\n\n\n  if (isLoading) {\n    return <div>Loading ...</div>;\n  }\n\n  return (\n    isAuthenticated && (\n      <div>\n        <img src={user.picture} alt={user.name} />\n        <h2>{user.name}</h2>\n        <p>{user.email}</p>\n      </div>\n    )\n  );\n};\n\nexport default Profile;","/Users/brianford/Desktop/Goals-Tracker/client/src/components/SideBar/index.js",["112"],"import React from \"react\"\nimport { bubble as Menu } from 'react-burger-menu'\nimport LoginButton from \"../LoginButton\"\nimport LogoutButton from \"../LogoutButton\"\nimport Profile from \"../Profile\"\nimport \"./index.css\"\n\nconst SideBar = () => {\n  \n\n  \n    // NOTE: You also need to provide styles, see https://github.com/negomi/react-burger-menu#styling\n    return (\n      <Menu>\n        <a id=\"profile\" className=\"menu-item\" href=\"/\"><Profile/></a>\n        <a id=\"home\" className=\"menu-item\" href=\"/\"><LoginButton/></a>\n        <a id=\"about\" className=\"menu-item\" href=\"/about\"><LogoutButton/></a>\n        <a id=\"contact\" className=\"menu-item\" href=\"/goal-creation/:userId\">Add a Goal</a>\n        <a className=\"menu-item--small\" href=\"\">Something Else</a>\n      </Menu>\n    );\n  \n}\n\nexport default SideBar;","/Users/brianford/Desktop/Goals-Tracker/client/src/pages/GoalCreation/index.js",["113","114"],"import React, { useState, useEffect, useContext } from 'react';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { Form, FormGroup, Label, Input, FormText, Container, Row, Col, Button } from 'reactstrap';\nimport './index.css';\nimport GoalModal from '../../components/GoalModal';\nimport UserContext from '../../utils/UserContext';\n\nconst GoalCreation = () => {\n  const [inputValues, setInputValues] = useState({\n    title: '',\n    description: '',\n    completionDate: '',\n    color: '',\n    popular: '',\n    upload: '',\n    highPriority: false,\n    goalUpdates: []\n  })\n  const { userId } = useParams();\n  const history = useHistory()\n  const userInfo = useContext(UserContext)\n  const [showModal, setShowModal] = useState(false)\n\n  const handleGoalSubmit = () => {\n    fetch(`/api/user/${userId}/goal/add`, {\n      method: 'PUT',\n      body: JSON.stringify(inputValues),\n      headers: { \n        \"Content-type\": \"application/json\"\n    } \n    }).then(res => {\n      if(res){\n        setShowModal(true)\n        setTimeout(() => {\n          history.push('/')\n        }, 2000);\n      } else {\n        console.log(res)\n      }\n    })\n  }\n\n  const handleInputChange = (name, value) => {\n    setInputValues({ ...inputValues, [name]: value })\n  }\n\n  const handlePopularClick = value => {\n    setInputValues({ ...inputValues, popular: value })\n  }\n\n  return (\n    <Container>\n      <Row>\n        {showModal &&\n          <Col sm={12}>\n            <GoalModal showModal={showModal} className={showModal ? \"show\" : \"hide\"} buttonLabel=\"X\" status=\"created\" />\n          </Col>\n        }\n        <Col sm={12} md={9} lg={6} className='form-column'>\n          <Form>\n            <FormGroup>\n              <Label for=\"exampleName\">Goal Name</Label>\n              <Input\n                type=\"name\"\n                name=\"title\"\n                id=\"exampleEmail\"\n                placeholder=\"with a placeholder\"\n                onChange={(e) => handleInputChange(e.currentTarget.name, e.currentTarget.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleText\">Goal Description</Label>\n              <Input\n                type=\"textarea\"\n                name=\"description\"\n                id=\"exampleText\"\n                onChange={(e) => handleInputChange(e.currentTarget.name, e.currentTarget.value)} />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleDate\">Goal End Date</Label>\n              <Input\n                type=\"date\"\n                name=\"completionDate\"\n                id=\"exampleDate\"\n                placeholder=\"date placeholder\"\n                onChange={(e) => handleInputChange(e.currentTarget.name, e.currentTarget.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleColor\">Color Code This Goal</Label>\n              <Input\n                type=\"color\"\n                name=\"color\"\n                id=\"exampleColor\"\n                placeholder=\"color placeholder\"\n                onChange={(e) => handleInputChange(e.currentTarget.name, e.currentTarget.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleSelect\">Does your goal fall under one of these categories?</Label>\n              <Input type=\"select\" onChange={(e) => handlePopularClick(e.currentTarget.value)} name=\"select\" id=\"exampleSelect\">\n                <option\n                  name='financial'\n                  onSelect={() => handlePopularClick()}>\n                  Financial</option>\n                <option\n                  name='healthFitness'\n                  onClick={() => handlePopularClick()}>\n                  Health/Fitness</option>\n                <option\n                  name='personalWellbeing'\n                  onClick={() => handlePopularClick()}>\n                  Personal Wellbeing</option>\n                <option\n                  name='professionalAchievement'\n                  onClick={() => handlePopularClick()}>\n                  Professional Achievement</option>\n                <option\n                  name='personalAchievement'\n                  onClick={() => handlePopularClick()}>\n                  Personal Achievement</option>\n                <option\n                  name='habit'\n                  onClick={() => handlePopularClick()}>\n                  Build/Break A Habit</option>\n              </Input>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleFile\">Upload</Label>\n              <Input\n                type=\"file\"\n                name='file'\n                id=\"exampleFile\" />\n              <FormText\n                color=\"muted\">\n                Upload an image of your goal here\n              </FormText>\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  onClick={() => setInputValues({ ...inputValues, highPriority: !inputValues.checked })} /> High priority goal?\n              </Label>\n            </FormGroup>\n            <Button onClick={() => handleGoalSubmit()}>Submit</Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default GoalCreation;","/Users/brianford/Desktop/Goals-Tracker/client/src/pages/GoalUpdate/index.js",["115","116","117"],"import React, { useState, useEffect } from 'react';\nimport { Form, FormGroup, Label, Input, Container, Row, Col, Button } from 'reactstrap';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport GoalModal from '../../components/GoalModal';\nimport './index.css';\n\nconst GoalUpdate = () => {\n  const [showModal, setShowModal] = useState(false)\n  const [goalData, setGoalData] = useState();\n  const [updateData, setUpdateData] = useState({\n    progress: 0,\n    note: \"\"\n  });\n  const { goalId } = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    fetch(`/api/goal/get/${goalId}`)\n      .then(res => res.json()).then(data => {\n        setGoalData(data)\n        if(data.goalUpdates.length){\n          setUpdateData({...updateData, progress: data.goalUpdates[data.goalUpdates.length - 1].progress})\n        }\n      })\n      .catch(err => console.log(err))\n  }, [goalId]);\n\n  const handleInputChange = (name, value) => {\n    setUpdateData({ ...updateData, [name]: value });\n  };\n\n  const handleSubmit = () =>{\n    fetch(`/api/goal/update/${goalId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    })\n      .then(res => {\n        console.log(res.status)\n        if(res.status == 200){\n          setShowModal(true)\n          setTimeout(()=>{\n            history.push('/')\n          }, 2000)\n        } else{\n          console.log(\"something went wrong with the update\")\n        }\n      })\n      .catch(err => console.log(err));\n  };\n\n  const backgroundColor = goalData ? goalData.color : 'lightGreen';\n\n  return (\n    <Container>\n      <Row>\n      {showModal &&\n          <Col sm={12}>\n            <GoalModal showModal={showModal} className={showModal ? \"show\" : \"hide\"} buttonLabel=\"X\" status=\"updated\" />\n          </Col>\n        }\n        <Col sm={12} md={9} lg={6} style={{ backgroundColor }}>\n          <Form>\n            {goalData &&\n              <h2>{goalData.title}</h2>\n            }\n            {goalData && goalData.image &&\n              <img src={goalData.image} alt=\"picture of goal\" />\n            }\n            {goalData &&\n              <>\n                <p>{goalData.description}</p>\n                <p>Originally created on : {goalData.createdAt}</p>\n              </>\n            }\n            <FormGroup row>\n              <Label\n                for=\"progressInput\"\n                >\n                Progress</Label>\n              <Col sm={2}>\n                <Input\n                  type=\"number\"\n                  name=\"progress\"\n                  id=\"progressInput\"\n                  placeholder=\"00\"\n                  value={updateData.progress}\n                  onChange={(e) => handleInputChange(e.currentTarget.name, e.currentTarget.value)} />\n              </Col>\n            </FormGroup>\n            <FormGroup>\n              {/* <Label\n                for=\"progressRange\">\n                Progress</Label> */}\n              <Input\n                type=\"range\"\n                name=\"progress\"\n                id=\"progressRange\"\n                value={updateData.progress}\n                onChange={(e) => handleInputChange(e.currentTarget.name, e.currentTarget.value)} />\n            </FormGroup>\n            <FormGroup row>\n              <Label\n                for=\"progressNote\"\n                >\n                Write a note about your progress here</Label>\n              <Col sm={10}>\n                <Input\n                  type=\"textarea\"\n                  name=\"note\"\n                  id=\"progressNote\"\n                  onChange={(e) => handleInputChange(e.currentTarget.name, e.currentTarget.value)} />\n              </Col>\n            </FormGroup>\n            <FormGroup check row>\n              <Col sm={{ size: 10, offset: 2 }}>\n                <Button  onClick={()=> handleSubmit()}>Submit</Button>\n              </Col>\n            </FormGroup>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default GoalUpdate;","/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListWidget/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/GraphWidget/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/NumberWidget/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/GoalModal/index.js",["118","119","120"],"import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst GoalModal = (props) => {\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    <div>\n      {/* <Button color=\"danger\" onClick={toggle}>{buttonLabel}</Button> */}\n      <Modal isOpen={props.showModal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Goal Saved</ModalHeader>\n        <ModalBody>\n          YOUR GOAL HAS BEEN SUCCESSFULLY {props.status.toUpperCase()}\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n}\n\nexport default GoalModal;","/Users/brianford/Desktop/Goals-Tracker/client/src/components/Widget/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/Progress/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/NumberDisplay/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListDisplay/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/ListItem/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/Loading/index.js",[],"/Users/brianford/Desktop/Goals-Tracker/client/src/components/BarChart/index.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":12,"column":8,"nodeType":"127","messageId":"128","endLine":12,"endColumn":16},{"ruleId":"129","severity":1,"message":"130","line":31,"column":6,"nodeType":"131","endLine":31,"endColumn":12,"suggestions":"132"},{"ruleId":"125","severity":1,"message":"133","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":13},{"ruleId":"125","severity":1,"message":"134","line":1,"column":28,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"125","severity":1,"message":"135","line":1,"column":38,"nodeType":"127","messageId":"128","endLine":1,"endColumn":47},{"ruleId":"125","severity":1,"message":"135","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":26},{"ruleId":"125","severity":1,"message":"136","line":6,"column":10,"nodeType":"127","messageId":"128","endLine":6,"endColumn":18},{"ruleId":"125","severity":1,"message":"137","line":6,"column":20,"nodeType":"127","messageId":"128","endLine":6,"endColumn":31},{"ruleId":"138","severity":1,"message":"139","line":19,"column":9,"nodeType":"140","endLine":19,"endColumn":49},{"ruleId":"125","severity":1,"message":"135","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"125","severity":1,"message":"141","line":21,"column":9,"nodeType":"127","messageId":"128","endLine":21,"endColumn":17},{"ruleId":"129","severity":1,"message":"142","line":26,"column":6,"nodeType":"131","endLine":26,"endColumn":14,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":42,"column":23,"nodeType":"146","messageId":"147","endLine":42,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":70,"column":15,"nodeType":"140","endLine":70,"endColumn":65},{"ruleId":"125","severity":1,"message":"150","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":16},{"ruleId":"125","severity":1,"message":"151","line":2,"column":49,"nodeType":"127","messageId":"128","endLine":2,"endColumn":60},{"ruleId":"125","severity":1,"message":"152","line":6,"column":5,"nodeType":"127","messageId":"128","endLine":6,"endColumn":16},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'BarChart' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'postData' and 'userData.length'. Either include them or remove the dependency array.","ArrayExpression",["155"],"'React' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'userInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array. You can also do a functional update 'setUpdateData(u => ...)' if you only need 'updateData' in the 'setUpdateData' call.",["156"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Button' is defined but never used.","'ModalFooter' is defined but never used.","'buttonLabel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [postData, user, userData.length]",{"range":"161","text":"162"},"Update the dependencies array to be: [goalId, updateData]",{"range":"163","text":"164"},[1095,1101],"[postData, user, userData.length]",[886,894],"[goalId, updateData]"]